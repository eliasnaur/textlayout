package testpackage

import (
	"encoding/binary"
	"fmt"
)

// Code generated by bin-parser-gen. DO NOT EDIT

func parseLookup(data []byte) (lookup, error) {
	var out lookup
	if L := len(data); L < 26 {
		return lookup{}, fmt.Errorf("EOF: expected length: 26, got %d", L)
	}
	out.a = int32(binary.BigEndian.Uint32(data[0:4]))
	out.b = int32(binary.BigEndian.Uint32(data[4:8]))
	out.c = int32(binary.BigEndian.Uint32(data[8:12]))
	out.d = uint32(binary.BigEndian.Uint32(data[12:16]))
	out.e = int64(binary.BigEndian.Uint64(data[16:24]))
	out.g = byte(data[24])
	out.h = byte(data[25])

	return out, nil
}

func (item lookup) write(data []byte) []byte {
	L := len(data)
	data = append(data, make([]byte, 26)...)
	dst := data[L:]
	binary.BigEndian.PutUint32(dst[0:], uint32(item.a))
	binary.BigEndian.PutUint32(dst[4:], uint32(item.b))
	binary.BigEndian.PutUint32(dst[8:], uint32(item.c))
	binary.BigEndian.PutUint32(dst[12:], uint32(item.d))
	binary.BigEndian.PutUint64(dst[16:], uint64(item.e))
	dst[24] = byte(item.g)
	dst[25] = byte(item.h)

	return data
}

func parseSubtable(data []byte) (subtable, error) {
	var out subtable
	if L := len(data); L < 6 {
		return subtable{}, fmt.Errorf("EOF: expected length: 6, got %d", L)
	}
	out.version = uint16(binary.BigEndian.Uint16(data[0:2]))
	out.x = int16(binary.BigEndian.Uint16(data[2:4]))
	out.y = int16(binary.BigEndian.Uint16(data[4:6]))

	return out, nil
}

func (item subtable) write(data []byte) []byte {
	L := len(data)
	data = append(data, make([]byte, 6)...)
	dst := data[L:]
	binary.BigEndian.PutUint16(dst[0:], uint16(item.version))
	binary.BigEndian.PutUint16(dst[2:], uint16(item.x))
	binary.BigEndian.PutUint16(dst[4:], uint16(item.y))

	return data
}
